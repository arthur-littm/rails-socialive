<div id="publisher"></div>

   <%# api_key = ENV['API_KEY'] %>
   <%# api_secret = ENV['API_SECRET'] %>

   <%# opentok = OpenTok::OpenTok.new api_key, api_secret %>
   <%# session = opentok.create_session :media_mode => :routed %>
   <%# sessionId = session.session_id %>
   <%# token = session.generate_token({
      :role        => :moderator,
      :expire_time => Time.now.to_i+(7 * 24 * 60 * 60), # in one week
      :data        => 'name=Johnny'
  }); %>

<script type="text/javascript">
  var apiKey = '<%= ENV['API_KEY'] %>';
  var sessionId = '<%= @livestream.sessionId %>';
  var token = '<%= @tok_token %>';


// Replace apiKey and sessionID with your own values:
var session = OT.initSession(apiKey, sessionId);

var publisherProperties = {
  insertMode: 'append',
  width: '100%',
  height: '100%',
  resolution: '1280x720',
  frameRate: 30};

var publisher = OT.initPublisher('publisher', publisherProperties, function (error) {
  if (error) {
    console.log(error);
  } else {
    console.log("Publisher initialized.");
  }
});

publisher.on({
  streamCreated: function (event) {
    console.log("Publisher started streaming.");
  },
  streamDestroyed: function (event) {
    console.log("Publisher stopped streaming. Reason: "
      + event.reason);
  }
});

session.on({

  // This function runs when another client publishes a stream (eg. session.publish())
  streamCreated: function(event) {
    // Create a container for a new Subscriber, assign it an id using the streamId, put it inside
    // the element with id="subscribers"
    var subContainer = document.createElement('div');
    subContainer.id = 'stream-' + event.stream.streamId;
    document.getElementById('subscribers').appendChild(subContainer);

    // Subscribe to the stream that caused this event, put it inside the container we just made
    session.subscribe(event.stream, subContainer);
  }

});

// Connect to the Session using a 'token'
session.connect(token, function(error, info) {
  if (error) {
    console.error('Failed to connect', error);
  } else {
    session.publish(publisher, function(error) {
      if (error) {
        console.error('Failed to publish', error);
      }
    });
  }
});

if (session.capabilities.publish == 1) {
    // The client can publish. See the next section.
    console.log("client can publish");
} else {
    // The client cannot publish.
    // You may want to notify the user.
    console.log("client CANNOT publish");
}

</script>




  <%# javascript_include_tag "helloworld.js"%>
